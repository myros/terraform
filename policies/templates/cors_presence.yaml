apiVersion: templates.gatekeeper.sh/v1alpha1
kind: ConstraintTemplate
metadata:
  name: cors_required
  annotations:
    description: Requires all resources to contain a specified label with a value
      matching a provided regular expression.
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredCORS
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties: 
            enabled:
              description: |
                ""
              type: boolean
            resource_types_to_scan:
              description: |
                "Optional parameter: list of resource types to scan for labels.
                Any resource that is not of these types will not raise any violation.
                If not passed, all tested resource types will be scanned for violations:
                - cloudresourcemanager.googleapis.com/Project
                - storage.googleapis.com/Bucket
                - compute.googleapis.com/Instance
                - compute.googleapis.com/Image
                - compute.googleapis.com/Disk
                - compute.googleapis.com/Snapshot
                - bigtableadmin.googleapis.com/Instance
                - sqladmin.googleapis.com/Instance
                - dataproc.googleapis.com/Job
                - dataproc.googleapis.com/Cluster
                - container.googleapis.com/Cluster
                - bigquery.googleapis.com/Dataset
                - bigquery.googleapis.com/Table
                Note: bigQuery Views have actually the bigquery.googleapis.com/Table resource type.
                If a resource type passed is not part of this list, the labels will be
                looked for in the data.labels key of the resource object.
                "
              type: array
              items:
                type: string
  targets:
    validation.gcp.forsetisecurity.org:
      rego: | #INLINE("validator/cors_presence.rego")
        package main
        
        import data.validator.gcp.lib as lib
        
        # https://play.openpolicyagent.org/p/ouThfo6Qrp (with enabled)
        # v2: https://play.openpolicyagent.org/p/FJNhu7LkSh
        
        deny[{"msg": msg, "details": {"missing_cors": missing}}] {
        	# an item is in the violation if...
        	constraint := input.constraint
        	lib.get_constraint_params(constraint, params)
        
        	# check rule enabled
        	not lib.get_default(params, "disabled", "False") == true # policy is not disabled
        
        	asset := input.asset
        
        	is_valid_type(params.resource_types_to_scan, asset.asset_type) # AND is valid (allowed) resource type
        
        	resource_data := asset.resource.data
        
        	not lib.has_field(resource_data, "cors") # AND resource_data does not have field CORS
        
        	missing := asset.name
        	msg := sprintf("you must provide cors for a bucket: %v", [asset.name])
        }
        
        is_valid_type(to_scan, asset_type) = valid { # item is valid type if 
        	valid := asset_type == to_scan[_]
        }
        
        is_enabled(params) {
        	lib.has_field(params, "enabled")
        	params.enabled
        }
        
        any_missing_field(input_data, field) {
        	# some i
        	# arr[i]
        	not input_data.field
        }
        #ENDINLINE