# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This template is for policies restricting the resource types
# in your organization hierarchy. You can specify which resource
# types are allowed (mode: allowlist) or denied (mode: denylist)
# using the "resource_type_list" and "mode" parameters.

apiVersion: templates.gatekeeper.sh/v1alpha1
kind: ConstraintTemplate
metadata:
  name: gcp-allowed-resource-types-v2
spec:
  crd:
    spec:
      names:
        kind: GCPAllowedResourceTypesConstraintV2
      validation:
        openAPIV3Schema:
          properties:
            mode:
              type: string
              enum: [allowlist, denylist]
              description: "String identifying the operational mode,
              allowlist or denylist. In the allowlist mode, only resource types
              from the resource_type_list will be allowed (all other types
              will raise a violation). In the denylist mode, any resource
              type not in the resource_type_list will not raise a violation."
            resource_type_list:
              type: array
              items:
                type: string
              description: "Array of resource types that will be either
              authorized (mode: allowlist) or denied (mode: denylist)."

  targets:
    validation.gcp.forsetisecurity.org:
      rego: | #INLINE("validator/allowed_resource_types.rego")
       package templates.gcp.GCPAllowedResourceTypesConstraintV1
       
       import data.validator.gcp.lib as lib
       
       deny[{
       	"msg": message,
       	"details": metadata,
       }] {
       	constraint := input.constraint
       	lib.get_constraint_params(constraint, params)
       	asset := input.asset
       
       	# 1 == 2
       	message := sprintf("%v is in violation.", [asset.name])
       	metadata := {"resource": asset.name}
       }
       #ENDINLINE